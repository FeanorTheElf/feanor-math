use crate::algorithms::linsolve::LinSolveRing;
use crate::algorithms::linsolve::LinSolveRingStore;
use crate::algorithms::poly_factor::FactorPolyField;
use crate::divisibility::DivisibilityRing;
use crate::matrix::OwnedMatrix;
use crate::field::*;
use crate::ring::*;
use crate::seq::*;
use crate::homomorphism::*;
use super::field::AsField;
use super::field::AsFieldBase;
use super::poly::dense_poly::DensePolyRing;
use super::poly::{PolyRingStore, PolyRing};

///
/// Contains [`extension_impl::FreeAlgebraImpl`], an implementation of [`FreeAlgebra`] based
/// on polynomial division.
/// 
pub mod extension_impl;

///
/// Contains [`galois_field::GaloisField`], an implementation of Galois fields.
/// 
pub mod galois_field;

///
/// A table of Conway polynomials, for standardized creation of finite fields.
/// 
pub mod conway;

///
/// A ring `R` that is an extension of a base ring `S`, generated by a single element
/// that is algebraic resp. integral over `S`.
/// 
/// This is equivalent to rings generated by a single element that is a zero of a monic polynomial over the
/// base ring. While sounding quite technical, this includes a wide class of important rings, like number 
/// fields or galois fields.
/// One consequence of this is that `R` is a free `S`-module, with a basis given by the powers 
/// of [`FreeAlgebra::canonical_gen()`], which is where the name "free" comes from.
/// 
/// The main implementation is [`extension_impl::FreeAlgebraImpl`].
/// 
/// # Nontrivial Automorphisms
/// 
/// Rings of this form very often have nontrivial automorphisms. In order to simplify situations
/// where morphisms or other objects are only unique up to isomorphism, canonical morphisms between rings
/// of this type must also preserve the canonical generator. 
/// 
/// # Examples
/// One of the most common use cases seems to be the implementation of finite fields (sometimes
/// called galois fields).
/// ```
/// #![feature(allocator_api)]
/// # use std::alloc::Global;
/// # use feanor_math::assert_el_eq;
/// # use feanor_math::ring::*;
/// # use feanor_math::rings::zn::*;
/// # use feanor_math::primitive_int::*;
/// # use feanor_math::rings::extension::*;
/// # use feanor_math::rings::extension::extension_impl::*;
/// # use feanor_math::algorithms::convolution::*;
/// # use feanor_math::field::FieldStore;
/// # use feanor_math::divisibility::*;
/// # use feanor_math::rings::fieldextension::SeparableFieldExtensionStore;
/// # use feanor_math::rings::finite::*;
/// // we have to decide for an implementation of the prime field
/// let prime_field = zn_static::Fp::<3>::RING;
/// let galois_field = FreeAlgebraImpl::new(prime_field, 3, [2, 1]);
/// // this is now the finite field with 27 elements, or F_27 or GF(27) since X^3 + 2X + 1 is irreducible modulo 3
/// let galois_field = galois_field.as_field().ok().unwrap();
/// assert_eq!(Some(27), galois_field.size(&StaticRing::<i64>::RING));
/// for x in galois_field.elements() {
///     if !galois_field.is_zero(&x) {
///         let inv_x = galois_field.div(&galois_field.one(), &x);
///         assert_el_eq!(galois_field, galois_field.one(), galois_field.mul(x, inv_x));
///     }
/// }
/// // since galois fields are so important, an efficient construction is provided by feanor-math;
/// // this is the new impl, the old one is instead available under `self::galois_field::galois_field_dyn()`
/// let galois_field_2 = galois_field::GaloisField::new_with(prime_field, 3, Global, STANDARD_CONVOLUTION);
/// // note that the generating polynomial might be different, so it is not necessarily the "same" ring
/// assert!(galois_field_2.can_iso(&galois_field).is_none());
/// // however we can still find isomorphisms
/// let hom = <_ as SeparableFieldExtensionStore>::has_hom(&galois_field_2, &galois_field).unwrap();
/// ```
/// 
pub trait FreeAlgebra: RingExtension {

    type VectorRepresentation<'a>: VectorFn<El<Self::BaseRing>>
        where Self: 'a;

    ///
    /// Returns the fixed element that generates this ring as a free module over the base ring.
    /// 
    fn canonical_gen(&self) -> Self::Element;

    ///
    /// Returns the rank of this ring as a free module over the base ring.
    /// 
    fn rank(&self) -> usize;

    ///
    /// Returns the representation of the element w.r.t. the canonical basis, that is the basis given
    /// by the powers `x^i` where `x` is the canonical generator given by [`FreeAlgebra::canonical_gen()`]
    /// and `i` goes from `0` to `rank - 1`.
    /// 
    /// In this sense, this is the opposite function to [`FreeAlgebra::from_canonical_basis()`].
    /// 
    fn wrt_canonical_basis<'a>(&'a self, el: &'a Self::Element) -> Self::VectorRepresentation<'a>;

    ///
    /// Returns the element that has the given representation w.r.t. the canonical basis, that is the basis given
    /// by the powers `x^i` where `x` is the canonical generator given by [`FreeAlgebra::canonical_gen()`]
    /// and `i` goes from `0` to `rank - 1`.
    /// 
    /// In this sense, this is the opposite function to [`FreeAlgebra::wrt_canonical_basis()`].
    /// 
    fn from_canonical_basis<V>(&self, vec: V) -> Self::Element
        where V: IntoIterator<Item = El<Self::BaseRing>>,
            V::IntoIter: DoubleEndedIterator
    {
        let mut given_len = 0;
        let x = self.canonical_gen();
        let mut result = self.zero();
        for c in vec.into_iter().rev() {
            self.mul_assign_ref(&mut result, &x);
            self.add_assign(&mut result, self.from(c));
            given_len += 1;
        }
        assert_eq!(given_len, self.rank());
        return result;
    }

    fn charpoly<P, H>(&self, el: &Self::Element, poly_ring: P, hom: H) -> El<P>
        where P: RingStore,
            P::Type: PolyRing,
            <<P::Type as RingExtension>::BaseRing as RingStore>::Type: LinSolveRing,
            H: Homomorphism<<Self::BaseRing as RingStore>::Type, <<P::Type as RingExtension>::BaseRing as RingStore>::Type>
    {
        assert!(!self.is_zero(el));
        let base_ring = hom.codomain();
        let mut lhs = OwnedMatrix::zero(self.rank(), self.rank(), &base_ring);
        let mut current = self.one();
        for j in 0..self.rank() {
            let wrt_basis = self.wrt_canonical_basis(&current);
            for i in 0..self.rank() {
                *lhs.at_mut(i, j) = hom.map(wrt_basis.at(i));
            }
            drop(wrt_basis);
            self.mul_assign_ref(&mut current, el);
        }
        let mut rhs = OwnedMatrix::zero(self.rank(), 1, &base_ring);
        let wrt_basis = self.wrt_canonical_basis(&current);
        for i in 0..self.rank() {
            *rhs.at_mut(i, 0) = base_ring.negate(hom.map(wrt_basis.at(i)));
        }
        let mut sol = OwnedMatrix::zero(self.rank(), 1, &base_ring);
        <_ as LinSolveRingStore>::solve_right(base_ring, lhs.data_mut(), rhs.data_mut(), sol.data_mut()).assert_solved();

        return poly_ring.from_terms((0..self.rank()).map(|i| (base_ring.clone_el(sol.at(i, 0)), i)).chain([(base_ring.one(), self.rank())].into_iter()));
    }
}

pub trait FreeAlgebraStore: RingStore
    where Self::Type: FreeAlgebra
{
    delegate!{ FreeAlgebra, fn canonical_gen(&self) -> El<Self> }
    delegate!{ FreeAlgebra, fn rank(&self) -> usize }

    ///
    /// See [`FreeAlgebra::wrt_canonical_basis()`].
    /// 
    fn wrt_canonical_basis<'a>(&'a self, el: &'a El<Self>) -> <Self::Type as FreeAlgebra>::VectorRepresentation<'a> {
        self.get_ring().wrt_canonical_basis(el)
    }

    ///
    /// See [`FreeAlgebra::from_canonical_basis()`].
    /// 
    fn from_canonical_basis<V>(&self, vec: V) -> El<Self>
        where V: IntoIterator<Item = El<<Self::Type as RingExtension>::BaseRing>>,
            V::IntoIter: DoubleEndedIterator
    {
        self.get_ring().from_canonical_basis(vec)
    }

    ///
    /// Returns the generating polynomial of this ring, i.e. the monic polynomial `f(X)` such that this ring is isomorphic
    /// to `R[X]/(f(X))`, where `R` is the base ring.
    /// 
    fn generating_poly<P, H>(&self, poly_ring: P, hom: H) -> El<P>
        where P: PolyRingStore,
            P::Type: PolyRing,
            H: Homomorphism<<<Self::Type as RingExtension>::BaseRing as RingStore>::Type, <<P::Type as RingExtension>::BaseRing as RingStore>::Type>
    {
        assert!(hom.domain().get_ring() == self.base_ring().get_ring());
        poly_ring.sub(
            poly_ring.from_terms([(poly_ring.base_ring().one(), self.rank())].into_iter()),
            self.poly_repr(&poly_ring, &self.pow(self.canonical_gen(), self.rank()), hom)
        )
    }

    ///
    /// If this ring is a field, returns a wrapper around this ring that implements [`crate::field::FieldStore`].
    /// 
    /// For details, see [`crate::rings::field::AsField`].
    /// 
    fn as_field(self) -> Result<AsField<Self>, Self>
        where Self::Type: DivisibilityRing, 
            <<Self::Type as RingExtension>::BaseRing as RingStore>::Type: PerfectField + Field + FactorPolyField
    {
        let poly_ring = DensePolyRing::new(self.base_ring(), "X");
        if <_ as FactorPolyField>::factor_poly(&poly_ring, &self.generating_poly(&poly_ring, self.base_ring().identity())).0.len() > 1 {
            return Err(self);
        } else {
            return Ok(RingValue::from(AsFieldBase::promise_is_perfect_field(self)));
        }
    }

    ///
    /// Returns the polynomial representation of the given element `y`, i.e. the polynomial `f(X)` of degree at most
    /// [`FreeAlgebraStore::rank()`] such that `f(x) = y`, where `y` is the canonical generator of this ring, as given by
    /// [`FreeAlgebraStore::canonical_gen()`].
    /// 
    fn poly_repr<P, H>(&self, to: P, el: &El<Self>, hom: H) -> El<P>
        where P: PolyRingStore,
            P::Type: PolyRing, 
            H: Homomorphism<<<Self::Type as RingExtension>::BaseRing as RingStore>::Type, <<P::Type as RingExtension>::BaseRing as RingStore>::Type>
    {
        let coeff_vec = self.wrt_canonical_basis(el);
        to.from_terms(
            (0..self.rank()).map(|i| coeff_vec.at(i)).enumerate()
                .filter(|(_, x)| !self.base_ring().is_zero(x))
                .map(|(j, x)| (hom.map(x), j))
        )
    }
}

#[stability::unstable(feature = "enable")]
pub fn create_multiplication_matrix<R: FreeAlgebraStore>(ring: R, el: &El<R>) -> OwnedMatrix<El<<R::Type as RingExtension>::BaseRing>> 
    where R::Type: FreeAlgebra
{
    let mut result = OwnedMatrix::zero(ring.rank(), ring.rank(), ring.base_ring());
    let mut current = ring.clone_el(el);
    let gen = ring.canonical_gen();
    for i in 0..ring.rank() {
        {
            let current_basis_repr = ring.wrt_canonical_basis(&current);
            for j in 0..ring.rank() {
                *result.at_mut(j, i) = current_basis_repr.at(j);
            }
        }
        ring.mul_assign_ref(&mut current, &gen);
    }
    return result;
}

impl<R: RingStore> FreeAlgebraStore for R
    where R::Type: FreeAlgebra
{}

#[cfg(any(test, feature = "generic_tests"))]
pub mod generic_tests {
    use super::*;

    pub fn test_free_algebra_axioms<R: FreeAlgebraStore>(ring: R)
        where R::Type: FreeAlgebra
    {
        let x = ring.canonical_gen();
        let n = ring.rank();
        
        let xn_original = ring.pow(ring.clone_el(&x), n);
        let xn_vec = ring.wrt_canonical_basis(&xn_original);
        let xn = ring.sum(Iterator::map(0..n, |i| ring.mul(ring.inclusion().map(xn_vec.at(i)), ring.pow(ring.clone_el(&x), i))));
        assert_el_eq!(ring, xn_original, xn);

        let x_n_1_vec_expected = (0..n).map_fn(|i| if i > 0 {
            ring.base_ring().add(ring.base_ring().mul(xn_vec.at(n - 1), xn_vec.at(i)), xn_vec.at(i - 1))
        } else {
            ring.base_ring().mul(xn_vec.at(n - 1), xn_vec.at(0))
        });
        let x_n_1 = ring.pow(ring.clone_el(&x), n + 1);
        let x_n_1_vec_actual = ring.wrt_canonical_basis(&x_n_1);
        for i in 0..n {
            assert_el_eq!(ring.base_ring(), x_n_1_vec_expected.at(i), x_n_1_vec_actual.at(i));
        }

        // test basis wrt_root_of_unity_basis linearity and compatibility from_root_of_unity_basis/wrt_root_of_unity_basis
        for i in (0..ring.rank()).step_by(5) {
            for j in (1..ring.rank()).step_by(7) {
                if i == j {
                    continue;
                }
                let element = ring.from_canonical_basis((0..n).map(|k| if k == i { ring.base_ring().one() } else if k == j { ring.base_ring().int_hom().map(2) } else { ring.base_ring().zero() }));
                let expected = ring.add(ring.pow(ring.clone_el(&x), i), ring.int_hom().mul_map(ring.pow(ring.clone_el(&x), j), 2));
                assert_el_eq!(ring, expected, element);
                let element_vec = ring.wrt_canonical_basis(&expected);
                for k in 0..ring.rank() {
                    if k == i {
                        assert_el_eq!(ring.base_ring(), ring.base_ring().one(), element_vec.at(k));
                    } else if k == j {
                        assert_el_eq!(ring.base_ring(), ring.base_ring().int_hom().map(2), element_vec.at(k));
                    } else {
                        assert_el_eq!(ring.base_ring(), ring.base_ring().zero(), element_vec.at(k));
                    }
                }
            }
        }
    }
}

#[cfg(test)]
use crate::primitive_int::StaticRing;
#[cfg(test)]
use extension_impl::FreeAlgebraImpl;

#[test]
fn test_charpoly() {
    let ring = FreeAlgebraImpl::new(StaticRing::<i64>::RING, 3, [2, 0, 0]);
    let poly_ring = DensePolyRing::new(StaticRing::<i64>::RING, "X");

    let [expected] = poly_ring.with_wrapped_indeterminate(|X| [X.pow_ref(3) - 2]);
    assert_el_eq!(&poly_ring, &expected, &ring.get_ring().charpoly(&ring.canonical_gen(), &poly_ring, &ring.base_ring().identity()));

    let [expected] = poly_ring.with_wrapped_indeterminate(|X| [X.pow_ref(3) - 4]);
    assert_el_eq!(&poly_ring, &expected, &ring.get_ring().charpoly(&ring.pow(ring.canonical_gen(), 2), &poly_ring, &ring.base_ring().identity()));

    let [expected] = poly_ring.with_wrapped_indeterminate(|X| [X.pow_ref(3) - 6 * X - 6]);
    assert_el_eq!(&poly_ring, &expected, &ring.get_ring().charpoly(&ring.add(ring.canonical_gen(), ring.pow(ring.canonical_gen(), 2)), &poly_ring, &ring.base_ring().identity()));
}